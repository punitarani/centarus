package user

import (
	"bytes"
	"testing"
)

func TestHashPassword(t *testing.T) {
	t.Parallel()

	// Test cases
	tests := []struct {
		name string
		pass string
		want []byte
	}{
		{
			name: "Test 1",
			pass: "iO1f7h9I",
			want: []byte{0x2f, 0x57, 0x6d, 0xf5, 0x2e, 0x99, 0xa0, 0x37, 0xfc, 0x1d, 0x5d, 0x6c, 0x15, 0x97, 0xca, 0xe2, 0x5a, 0x4d, 0xa2, 0xf5, 0x26, 0xd0, 0xec, 0x24, 0xf3, 0xd1, 0x6f, 0x50, 0x12, 0x2a, 0x39, 0x48},
		},
		{
			name: "Test 2",
			pass: "NO9ek3LXY0Wb",
			want: []byte{0xda, 0x0a, 0x83, 0x6c, 0xdf, 0x84, 0x8f, 0x80, 0xd1, 0xf4, 0x97, 0xbe, 0x0e, 0x77, 0x3a, 0x80, 0xb9, 0x6e, 0x6e, 0x1c, 0x1b, 0x4d, 0x54, 0x0b, 0xfb, 0x10, 0xe0, 0x76, 0xee, 0x40, 0xae, 0x89},
		},
		{
			name: "Test 3",
			pass: "0MCcYTAyDaU71JkD",
			want: []byte{0x38, 0xfd, 0x77, 0x7a, 0xcb, 0x97, 0x47, 0xc7, 0x31, 0x87, 0xcf, 0x0e, 0xa4, 0x2d, 0xa2, 0x86, 0xfb, 0xd7, 0x15, 0xa8, 0xe4, 0xc3, 0x2e, 0x6f, 0x52, 0xcb, 0x32, 0x18, 0xd3, 0x77, 0xe1, 0xc1},
		},
		{
			name: "Test 4",
			pass: "myfBIK6RYMVO086CTzEF",
			want: []byte{0xd9, 0xe8, 0xf2, 0x00, 0x77, 0x6a, 0x8f, 0x3e, 0x17, 0x27, 0x3b, 0x5b, 0x12, 0x7f, 0x60, 0xd0, 0xe3, 0x61, 0x7f, 0xa4, 0xde, 0xbf, 0x35, 0xfc, 0xe0, 0x0b, 0xd4, 0xf0, 0xce, 0xc0, 0xdf, 0x49},
		},
		{
			name: "Test 5",
			pass: "Nr5OKqqz1dDS6MwHpAsp4dTA",
			want: []byte{0x82, 0x3c, 0x3d, 0x30, 0x94, 0x01, 0x0f, 0x34, 0x61, 0x4a, 0xcd, 0x33, 0xcd, 0x71, 0xa0, 0x41, 0x70, 0x8e, 0x4d, 0x18, 0xe6, 0xe9, 0xfc, 0x7f, 0x2e, 0x70, 0xe5, 0x63, 0x40, 0xf5, 0xcf, 0x61},
		},
		{
			name: "Test 6",
			pass: "XkOtORGBrR0ufMaw9GUWFkacsFt4kPjY",
			want: []byte{0x7c, 0x52, 0xa3, 0x1a, 0x50, 0xe9, 0xe0, 0xa0, 0x88, 0x16, 0xa6, 0x2c, 0x54, 0xb7, 0x4d, 0x83, 0x8f, 0x75, 0x6e, 0x10, 0x6a, 0xbf, 0x2e, 0x27, 0x71, 0x1a, 0x42, 0x9d, 0xd7, 0xd9, 0x12, 0xd3},
		},
	}

	// 32 byte long salt
	salt := []byte("fdjecCyZAstBhhoKSHc16Hlip5Tktp0x")

	// rotateSalt is a function that rotates the salt by i bytes
	rotateSalt := func(i int) []byte {
		return append(salt[i:], salt[:i]...)
	}

	// Run the tests
	for i, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := HashPassword(tt.pass, rotateSalt(i)); bytes.Compare(got, tt.want) != 0 {
				t.Errorf("HashPassword() = %v, want %v", got, tt.want)
			}
		})
	}
}
